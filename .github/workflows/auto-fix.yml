name: "Auto Fix (CI failure)"

on:
  # Kích hoạt khi workflow CI hoàn tất (pass/fail). Đổi "CI" nếu tên workflow CI của bạn khác.
  workflow_run:
    workflows: ["ci"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: auto-fix-${{ github.event.workflow_run.id }}
  cancel-in-progress: false

jobs:
  autofix:
    # Chỉ chạy nếu kết luận CI là failure và có ít nhất 1 PR liên quan
    if: >
      ${{ github.event.workflow_run.conclusion == 'failure' &&
          github.event.workflow_run.event == 'pull_request' &&
          github.event.workflow_run.pull_requests &&
          github.event.workflow_run.pull_requests[0].number }}
    runs-on: ubuntu-latest

    env:
      RUN_ID: ${{ github.event.workflow_run.id }}
      PR_NUMBER: ${{ github.event.workflow_run.pull_requests[0].number }}
      HEAD_BRANCH: ${{ github.event.workflow_run.pull_requests[0].head.ref }}
      MAX_ATTEMPTS: "3"   # Giới hạn số lần tự sửa liên tiếp
      CODEX_PROMPT_PREFIX: |
        Nhiệm vụ: dựa trên log CI dưới đây, tìm lỗi chính và tạo patch DIFF chuẩn `git` để sửa tối thiểu cho build/test pass.
        YÊU CẦU:
        - Chỉ xuất DIFF (dạng unified diff với `--- a/` và `+++ b/`), KHÔNG giải thích.
        - Không đổi logic không liên quan.
        - Nếu không chắc chắn, thêm fix nhỏ (import thiếu, type sai, đường dẫn sai, test cập nhật nhỏ) để build/test qua.
      # Tuỳ chọn: đặt CODEX_API_KEY / CODEX_API_URL làm secrets nếu bạn dùng service riêng
      CODEX_API_KEY: ${{ secrets.CODEX_API_KEY }}
      CODEX_API_URL: ${{ secrets.CODEX_API_URL }}

    steps:
      - name: Show context
        run: |
          echo "RUN_ID=${RUN_ID}"
          echo "PR_NUMBER=${PR_NUMBER}"
          echo "HEAD_BRANCH=${HEAD_BRANCH}"

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.HEAD_BRANCH }}
          fetch-depth: 0

      - name: Ensure Git identity for commits
        run: |
          git config user.name "autofix-bot"
          git config user.email "bot@diabot.top"

      - name: Install gh CLI (if missing)
        run: |
          if ! command -v gh >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y gh
          fi
          gh --version

      - name: Fetch CI logs for failed run
        id: logs
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Ghi log CI của workflow_run id về file
          gh run view "${RUN_ID}" --log > ci.log || true
          echo "----[ tail 120 lines ]----"
          tail -n 120 ci.log || true
          # Lưu đoạn log súc tích để feed cho Codex
          tail -n 500 ci.log > ci_tail.log || true
          echo "::set-output name=log_ready::$( [ -s ci_tail.log ] && echo yes || echo no )"

      - name: Abort if no logs available
        if: steps.logs.outputs.log_ready != 'yes'
        run: |
          echo "Không lấy được log CI. Dừng auto-fix."
          exit 1

      # (Tuỳ bạn) Nếu cần Node để chạy npx codex
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Generate patch with Codex (preferred)
        id: genpatch
        run: |
          # ƯU TIÊN: dùng npx gọi công cụ codex-cli nội bộ (nếu có)
          # Yêu cầu: package codex-cli tương thích npx (hoặc bạn thay bằng lệnh riêng)
          set -e
          echo "=== Prompt start ==="
          echo "${CODEX_PROMPT_PREFIX}"
          echo "===== LOG ====="
          tail -n 500 ci.log | sed 's/\x1b\[[0-9;]*m//g' | tail -n 500
          echo "=== Prompt end ==="

          # Thử dùng npx (sẽ tự tải nếu chưa có). Đổi lệnh cho khớp CLI của bạn.
          # Ví dụ minh hoạ: npx @diabot/codex-cli diff --stdin-log > patch.diff
          if npx -y @diabot/codex-cli@latest diff --prompt "${CODEX_PROMPT_PREFIX}" --log-file ./ci_tail.log > patch.diff 2> codex.err; then
            echo "Codex CLI generated patch."
          else
            echo "Codex CLI failed or not available. Falling back to generic endpoint if provided."
            # Fallback: gọi endpoint CODEX_API_URL (nếu bạn có DIA BRAIN/OpenAI proxy).
            if [ -n "${CODEX_API_URL}" ] && [ -n "${CODEX_API_KEY}" ]; then
              curl -sS -X POST "${CODEX_API_URL}" \
                -H "Authorization: Bearer ${CODEX_API_KEY}" \
                -H "Content-Type: application/json" \
                -d "$(jq -n --arg prompt "${CODEX_PROMPT_PREFIX}" --rawfile log ./ci_tail.log '{prompt:$prompt,log:$log,mode:"diff"}')" \
                > patch.diff || true
            fi
          fi

          # Kiểm tra patch
          if [ ! -s patch.diff ]; then
            echo "NO_PATCH=1" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Heuristic: patch hợp lệ thường có --- a/ và +++ b/
          if ! grep -qE '^--- a/|^\+\+\+ b/' patch.diff; then
            echo "Patch không có header unified diff hợp lệ. Xoá patch."
            rm -f patch.diff
            echo "NO_PATCH=1" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "NO_PATCH=0" >> $GITHUB_OUTPUT

      - name: Stop if no patch generated
        if: steps.genpatch.outputs.NO_PATCH == '1'
        run: |
          echo "Codex không tạo được patch hợp lệ. Dừng lượt auto-fix này."
          exit 1

      - name: Apply patch
        id: apply
        run: |
          set -e
          git apply --index --reject patch.diff || {
            echo "apply_fail=1" >> $GITHUB_OUTPUT
            exit 1
          }
          echo "apply_fail=0" >> $GITHUB_OUTPUT

      - name: Commit & push fix
        if: steps.apply.outputs.apply_fail == '0'
        run: |
          # Đếm số lần autofix trước đó để giới hạn vòng lặp
          COUNT=$(git log --oneline | grep -c '^.*autofix: CI failure patch')
          echo "Autofix attempt so far: $COUNT"
          if [ "$COUNT" -ge "$MAX_ATTEMPTS" ]; then
            echo "Vượt quá MAX_ATTEMPTS=${MAX_ATTEMPTS}. Dừng."
            exit 1
          fi

          git commit -m "autofix: CI failure patch (attempt $((COUNT+1)))" || true
          # Nếu không có gì để commit (do patch trùng), dừng sớm để tránh vòng lặp
          if ! git diff --exit-code; then
            echo "There are staged changes after commit (?)"
          fi
          # Push lên đúng nhánh PR
          git push origin HEAD:${HEAD_BRANCH}

      - name: Comment back to PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = Number(process.env.PR_NUMBER);
            const { owner, repo } = context.repo;
            const body = [
              "🤖 **Auto-Fix Bot**: đã tạo patch và push lên nhánh PR.",
              "- CI đang chạy lại. Nếu còn fail, bot sẽ tiếp tục thử (tối đa " + process.env.MAX_ATTEMPTS + " lần).",
              "- Bạn có thể dừng bot bằng cách gỡ quyền hoặc đổi nhãn."
            ].join("\n");
            await github.rest.issues.createComment({ owner, repo, issue_number: prNumber, body });

      - name: Stop if attempts exceeded (soft guard)
        run: |
          # Nếu commit không tạo thay đổi, step trước đã exit 0; CI sẽ rerun.
          # Guard bổ sung: không làm gì, vì CI sẽ tự chạy lại trên push mới.
          echo "Auto-fix step completed."
