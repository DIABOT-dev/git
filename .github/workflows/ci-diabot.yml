name: DIABOT â€” Build + Smoke + QA (auto)

on:
  push:
    branches: [ main ]     # Tá»± Ä‘á»™ng cháº¡y khi push vÃ o main
  pull_request:            # Tá»± Ä‘á»™ng cháº¡y khi cÃ³ PR
    branches: [ main ]
  workflow_dispatch: {}    # Cho phÃ©p báº¥m tay "Run workflow"

env:
  REGISTRY: ghcr.io
  BASE_URL: http://localhost:3000
  PROTECTED_API_PATH: "/api/me"
  SUPABASE_REST_URL: "https://<project>.supabase.co/rest/v1"
  COOKIE_FILE: ".qa_cookies.txt"

jobs:
  build:
    name: Build & Push image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.meta.outputs.image }}
      image_latest: ${{ steps.meta.outputs.image_latest }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image tags
        id: meta
        run: |
          OWNER_REPO=$(echo "${GITHUB_REPOSITORY,,}") # e.g. diabot-dev/final-test
          SHA_TAG=${GITHUB_SHA::12}
          echo "image=${{ env.REGISTRY }}/${OWNER_REPO}:${SHA_TAG}" >> $GITHUB_OUTPUT
          echo "image_latest=${{ env.REGISTRY }}/${OWNER_REPO}:latest" >> $GITHUB_OUTPUT

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta.outputs.image }}
            ${{ steps.meta.outputs.image_latest }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  smoke:
    name: Smoke (/api/qa/selftest)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      packages: read
      
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image
        run: docker pull ${{ needs.build.outputs.image }}

      - name: Run container
        run: |
          docker run -d --name diabot \
            -p 3000:3000 \
            -e AUTH_DEV_MODE=true \
            ${{ needs.build.outputs.image }}

      - name: Wait until /auth/login is 200
        run: |
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.BASE_URL }}/auth/login" || true)
            if [ "$code" = "200" ]; then exit 0; fi
            sleep 2
          done
          exit 1

      - name: GET /api/qa/selftest
        run: |
          code=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.BASE_URL }}/api/qa/selftest")
          test "$code" = "200"

  qa-checklist:
    name: QA checklist (auth/pages/API/RLS)
    runs-on: ubuntu-latest
    needs: [build, smoke]
    permissions:
      packages: read
        packages: read
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image
        run: docker pull ${{ needs.build.outputs.image }}

      - name: Run container
        run: |
          docker run -d --name diabot \
            -p 3000:3000 \
            -e AUTH_DEV_MODE=true \
            ${{ needs.build.outputs.image }}

      - name: Wait until /auth/login is 200
        run: |
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.BASE_URL }}/auth/login" || true)
            if [ "$code" = "200" ]; then exit 0; fi
            sleep 2
          done
          exit 1

      - name: Make QA script executable
        run: chmod +x scripts/qa_checklist_pages_rls.sh

      - name: Run QA checklist
        env:
          BASE_URL: ${{ env.BASE_URL }}
          PROTECTED_API_PATH: ${{ env.PROTECTED_API_PATH }}
          SUPABASE_REST_URL: ${{ env.SUPABASE_REST_URL }}
          USER_A_JWT: ${{ secrets.USER_A_JWT }}
          USER_B_JWT: ${{ secrets.USER_B_JWT }}
          PROFILE_A_ID: ${{ secrets.PROFILE_A_ID }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          COOKIE_FILE: ${{ env.COOKIE_FILE }}
          # ðŸ‘‡ sá»­a path log Ä‘Ãºng vá»›i project cá»§a báº¡n
          PAGES_200: "/log/meal /chart /profile /rewards"
        run: bash scripts/qa_checklist_pages_rls.sh

      - name: Upload qa_checklist.log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qa_checklist_log
          path: qa_checklist.log

      - name: Show QA log in summary
        if: always()
        run: |
          echo '### QA checklist log' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat qa_checklist.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  quality-gate:
    name: Quality Gate â€” No Bolt/Supabase remnants
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: No-Bolt static scan
        run: node scripts/qa_no_bolt.mjs
