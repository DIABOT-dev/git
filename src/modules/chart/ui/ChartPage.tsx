// src/modules/chart/ui/ChartPage.tsx
import React from "react";
import { FetchChartData } from "../application/usecases/FetchChartData";
import { ChartVM, Metric, RangeOption } from "../domain/types";
import { track } from "../infrastructure/adapters/Telemetry";
import MetricCards from "./MetricCards";
import TrendChart from "./TrendChart";
import LogTimeline from "./LogTimeline";
import { Segmented } from "./components/ToggleGroup";
import { Skeleton } from "./components/Skeleton";
import { useEffect, useState } from 'react';
import { getFeatureFlag } from '../../../../config/feature-flags';

const metricOptions: { label: string; value: Metric }[] = [ // ƒê√£ b·ªè "All" kh·ªèi ki·ªÉu
  { label: "ƒê∆∞·ªùng huy·∫øt", value: "BG" },
  { label: "Huy·∫øt √°p", value: "BP" },
  { label: "Ti√™m Insulin", value: "Insulin" },
  { label: "C√¢n n·∫∑ng", value: "Weight" },
  { label: "N∆∞·ªõc u·ªëng", value: "Water" },
  { label: "B·ªØa ƒÉn", value: "Meal" },
];

export default function ChartPage() {
  const [range, setRange] = React.useState<RangeOption>("7d");
  const [focus, setFocus] = React.useState<Metric>("BG"); // ƒê·∫∑t m·∫∑c ƒë·ªãnh l√† "BG"
  const [vm, setVM] = React.useState<ChartVM | null>(null);
  const [loading, setLoading] = React.useState<boolean>(true);
  const [error, setError] = React.useState<string | null>(null);
  const [isOffline, setIsOffline] = React.useState<boolean>(false);

  // Check CHART_FALLBACK flag
  const isChartFallbackEnabled = getFeatureFlag('CHART_FALLBACK');

  React.useEffect(() => {
    track("chart_open", { ts: Date.now() });
  }, []);

  React.useEffect(() => {
    let mounted = true;
    setLoading(true); setError(null); setIsOffline(false);

    FetchChartData(range)
      .then((data) => { if (mounted) setVM(data); })
      .catch((e) => {
        if (mounted) {
          setError(e?.message || "Load error");
          // Check if error indicates network/offline issues
          if (e?.message?.includes('fetch') || e?.message?.includes('network')) {
            setIsOffline(true);
          }
          track("chart_error", { message: e?.message });
        }
      })
      .finally(() => { if (mounted) setLoading(false); });
    return () => { mounted = false; };
  }, [range]);

  // Show placeholder when CHART_FALLBACK is disabled
  if (!isChartFallbackEnabled) {
    return (
      <div className="flex flex-col items-center justify-center h-64 text-center space-y-4 p-4 rounded-2xl border border-blue-200 bg-blue-50 shadow-sm">
        <div className="text-6xl mb-4">‚öôÔ∏è</div>
        <h3 className="text-lg font-semibold text-blue-800">ƒêang chuy·ªÉn sang ch·∫ø ƒë·ªô cache sau live</h3>
        <p className="text-blue-600 max-w-sm">Ch·ª©c nƒÉng bi·ªÉu ƒë·ªì t·∫°m th·ªùi b·ªã t·∫Øt. H·ªá th·ªëng ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t.</p>
        <div className="flex gap-3 mt-4">
          <a href="/log/bg" className="px-4 py-2 rounded-xl bg-blue-600 text-white hover:bg-blue-700 transition-colors">
            Ti·∫øp t·ª•c ghi nh·∫≠t k√Ω
          </a>
        </div>
      </div>
    );
  }

  // Show offline state
  if (isOffline) {
    return (
      <div className="flex flex-col items-center justify-center h-64 text-center space-y-4 p-4 rounded-2xl border border-gray-200 bg-gray-50 shadow-sm">
        <div className="text-6xl mb-4">üîå</div>
        <h3 className="text-lg font-semibold text-gray-800">ƒêang offline</h3>
        <p className="text-gray-600 max-w-sm">Kh√¥ng th·ªÉ k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi v√† th·ª≠ l·∫°i.</p>
        <div className="flex gap-3 mt-4">
          <button
            onClick={() => window.location.reload()}
            className="px-4 py-2 rounded-xl bg-gray-600 text-white hover:bg-gray-700 transition-colors"
          >
            Th·ª≠ l·∫°i
          </button>
        </div>
      </div>
    );
  }

  if (!loading && !error && (!vm || !vm.days || vm.days.length === 0)) {
    return (
      <div className="flex flex-col items-center justify-center h-64 text-center space-y-4 p-4 rounded-2xl border border-gray-200 bg-white shadow-sm">
        <div className="text-6xl mb-4">üìä</div>
        <h3 className="text-lg font-semibold text-gray-800">Ch∆∞a c√≥ d·ªØ li·ªáu tu·∫ßn n√†y</h3>
        <p className="text-gray-600 max-w-sm">B·∫Øt ƒë·∫ßu ghi nh·∫≠t k√Ω ƒë·ªÉ xem xu h∆∞·ªõng s·ª©c kh·ªèe c·ªßa b·∫°n</p>
        <div className="flex gap-3 mt-4">
          <a href="/log/bg" className="btn btn-primary">
            Ghi ƒë∆∞·ªùng huy·∫øt
          </a>
          <a href="/log/meal" className="btn btn-ghost">
            Ghi b·ªØa ƒÉn
          </a>
        </div>
      </div>
    );
  }
  
  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row items-center justify-between gap-3">
        <Segmented
          ariaLabel="Ch·ªçn kho·∫£ng th·ªùi gian"
          value={range}
          onChange={(v) => { setRange(v); track("chart_toggle_range", { range: v }); }}
          options={[{label:"7 ng√†y", value:"7d"}, {label:"30 ng√†y", value:"30d"}] as any}
        />
        <div className="flex flex-col items-center gap-2 mt-3 sm:mt-0">
          <h3 className="text-base font-semibold text-gray-800">Ch·ªçn b·∫£ng b√°o c√°o</h3>
          {/* Thay th·∫ø Segmented b·∫±ng l∆∞·ªõi c√°c n√∫t t√πy ch·ªânh */}
          <div className="grid grid-cols-3 gap-2 w-full"> {/* S·ª≠ d·ª•ng grid cho 3 c·ªôt */}
            {metricOptions.map((opt) => {
              const active = opt.value === focus;
              return (
                <button
                  key={opt.value}
                  onClick={() => setFocus(opt.value)}
                  className={`flex items-center justify-center h-12 rounded-xl border text-sm font-medium whitespace-nowrap transition-all duration-200
                    ${active ? "bg-primary text-white shadow-sm border-primary" : "bg-white text-gray-700 hover:bg-gray-50 border-gray-300"}`}
                >
                  {opt.label}
                </button>
              );
            })}
          </div>
        </div>
      </div>

      {loading && <Skeleton className="h-24 rounded-2xl" />}
      {error && <div className="text-sm text-red-600 p-3 rounded-lg bg-red-50 border border-red-200">{error}</div>}
      {vm && <MetricCards kpi={vm.kpi} />}

      {loading && <Skeleton className="h-72 rounded-2xl" />}
      {vm && <TrendChart vm={vm} focus={focus} />}

      {vm && <LogTimeline range={range} metrics={[focus]} />} {/* Truy·ªÅn focus tr·ª±c ti·∫øp */}

      {/* Th√™m n√∫t h∆∞·ªõng d·∫´n xem b√°o c√°o */}
      <div className="flex justify-center mt-6">
        <button
          onClick={() => alert("H∆∞·ªõng d·∫´n xem b√°o c√°o s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã t·∫°i ƒë√¢y.")} // Placeholder action
          className="px-5 py-2 rounded-xl font-medium border border-gray-300 bg-white hover:bg-gray-50 text-gray-700 transition-colors"
        >
          H∆∞·ªõng d·∫´n xem b√°o c√°o
        </button>
      </div>
    </div>
  );
}
